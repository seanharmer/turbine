/*
  This file is part of KDGraphics.

  SPDX-FileCopyrightText: 2023 Klar√§lvdalens Datakonsult AB, a KDAB Group company <info@kdab.com>

  SPDX-License-Identifier: MIT

  Contact KDAB at <info@kdab.com> for commercial licensing options.
*/
#include "<%= "#{name}.h" %>"

#include <KDGraphics/kdgraphics_core.h>

#include <KDGpuExample/engine.h>

#include <imgui.h>

#include <cmath>
#include <string>

namespace KDGraphics {

inline std::string assetPath()
{
#if defined(KDGRAPHICS_ASSET_PATH)
    return KDGRAPHICS_ASSET_PATH;
#else
    return "";
#endif
}

} // namespace KDGraphics


<%= "#{name.capitalize}::#{name.capitalize}() = default;" %>
<%= "#{name.capitalize}::~#{name.capitalize}() = default;" %>

void <%= name.capitalize %>::initializeScene()
{
    using std::placeholders::_1;
    auto func = std::bind(&<%= name.capitalize %>::drawControls, this, _1);
    registerImGuiOverlayDrawFunction(func);

    // Create a vertex shader and fragment shader
    const auto vertexShaderPath = KDGraphics::assetPath() + "/shaders/examples/<%= name %>/<%= name %>.vert.spv";
    auto vertexShader = m_device.createShaderModule(KDGpu::readShaderFile(vertexShaderPath));

    const auto fragmentShaderPath = KDGraphics::assetPath() + "/shaders/examples/<%= name %>/<%= name %>.frag.spv";
    auto fragmentShader = m_device.createShaderModule(KDGpu::readShaderFile(fragmentShaderPath));

    // TODO: Create a pipeline and other resources
}

void <%= name.capitalize %>::cleanupScene()
{
}

void <%= name.capitalize %>::updateScene()
{
    const float t = engine()->simulationTime().count() / 1.0e9;

    // TODO: Update scene state
}

void <%= name.capitalize %>::resize()
{
    // Swapchain might have been resized and texture views recreated. Ensure we update the PassOptions accordingly
    // m_renderPassOptions.depthStencilAttachment.view = m_depthTextureView;

    // TODO: Recreate any swapchain-dependent resources
}

void <%= name.capitalize %>::drawControls(ImGuiContext *ctx)
{
    ImGui::SetCurrentContext(ctx);
    ImGui::SetNextWindowPos(ImVec2(10, 170), ImGuiCond_FirstUseEver);
    ImGui::SetNextWindowSize(ImVec2(0, 0), ImGuiCond_FirstUseEver);
    ImGui::Begin(
            "Controls",
            nullptr,
            ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_NoResize);
    ImGui::Text("<%= "#{name.capitalize} Example" %>");

    // TODO: Add ImGui code here

    ImGui::End();
}

void <%= name.capitalize %>::render()
{
    // TODO: Add rendering code here
}
